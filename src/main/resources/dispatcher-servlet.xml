<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd"
>

   <!-- 通常，每个XML配置文件都表示体系结构中的一个逻辑层或模块。 -->
    <!-- 使用 import 引入其他配置文件
        import 路径说明：resource属性中使用的是相对路径，相对于当前文件的路径，如果写成绝对路径格式（以 '\' 开头）也会被看做相对路径
        当然使用 file:E:/config/service.xml 或者 `classpath:/config/service` 也可以
    -->

    <import resource="services.xml" />

    <!-- 构造器实例化 bean - 参数类型方式匹配 -->
    <bean id="exampleBean" class="examples.instantiating.ExampleBean">
        <constructor-arg type="int" value="75000"/>
        <constructor-arg type="java.lang.String" value="42" />
    </bean>
    <!-- 构造器实例化 bean - 参数位置方式匹配 -->
    <bean id="exampleBean2" class="examples.instantiating.ExampleBean">
        <constructor-arg index="0" value="75000"/>
        <constructor-arg index="1" value="42" />
    </bean>

    <!-- 构造器实例化 bean - 参数名方式匹配 -->
    <bean id="exampleBean3" class="examples.instantiating.ExampleBean">
        <constructor-arg name="years" value="7500"/>
        <constructor-arg name="ultimateAnswer" value="42"/>
    </bean>


    <!-- 静态工厂方法实例化 Bean -->
    <bean id="staticFactoryMethod" class="examples.instantiating.StaticFactoryMethod" factory-method="createInstance" />

    <!-- 非静态工厂方法实例化 Bean -->
    <bean id="nonStaticFactoryMethod" class="examples.instantiating.NonStaticFactoryMethod" />
    <bean id="service1" factory-bean="nonStaticFactoryMethod" factory-method="getInstance1" />
    <bean id="service2" factory-bean="nonStaticFactoryMethod" factory-method="getInstance2" />

    <!-- 基于 setter 方式的注入 -->
    <bean id="exampleBean4" class="examples.instantiating.ExampleBean">
        <property name="years" value="750000"/>
        <property name="ultimateAnswer" value="44"/>
    </bean>

    <bean id="exampleBean5" class="examples.instantiating.ExampleBean"
          p:years="7000"
          p:ultimateAnswer="45">
    </bean>

    <bean id="targetBean" class="examples.instantiating.ExampleRef"/>

    <bean id="exampleBean6" class="examples.instantiating.ExampleBean">
        <property name="refBean">
            <idref bean="targetBean" />
        </property>
    </bean>

    <bean id="exampleBean7" class="examples.instantiating.ExampleBean">
        <property name="ref">
            <ref bean="targetBean"/>
        </property>
    </bean>

    <!-- inner beans -->
    <bean id="outer" class="examples.instantiating.ExampleBean">
        <property name="ref">
            <bean class="examples.instantiating.ExampleRef" />
        </property>
    </bean>

    <bean id="moreComplexObject" class="examples.instantiating.ComplexObject">
        <!-- results in a setAdminEmails(java.util.Properties) call -->
        <property name="adminEmails">
            <props>
                <prop key="administrator">administrator@example.org</prop>
                <prop key="support">support@example.org</prop>
                <prop key="development">development@example.org</prop>
            </props>
        </property>
        <!-- results in a setSomeList(java.util.List) call -->
        <property name="someList">
            <list>
                <value>a list element followed by a reference</value>
                <ref bean="" />
            </list>
        </property>
        <!-- results in a setSomeMap(java.util.Map) call -->
        <property name="someMap">
            <map>
                <entry key="an entry" value="just some string"/>
                <entry key ="a ref" value-ref="myDataSource"/>
            </map>
        </property>
        <!-- results in a setSomeSet(java.util.Set) call -->
        <property name="someSet">
            <set>
                <value>just some string</value>
                <ref bean="myDataSource" />
            </set>
        </property>
    </bean>
</beans>
