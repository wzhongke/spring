<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="mybatis.mapper.PersonMapper">
    <!--
        String selectPerson = "SELECT * FROM PERSON WHERE ID=?";
        PreparedStatement ps = conn.prepareStatement(selectPerson);
        ps.setInt(1,id);
        -->
    <!--<select id="selectPerson" resultType="mybatis.dao.Person" parameterType="int">-->
        <!--SELECT * FROM Person WHERE id = #{id}-->
    <!--</select>-->

    <!--
        id: 命名空间的唯一标识符，可以被用来引用这条语句。
        parameterType: 可选，传入参数限定类型
        resultType: 期望类型的类的完全限定名或别名。使用 resultType 或 resultMap，但不能同时使用。
        resultMap: 外部 resultMap 的命名引用
        flushCache: 如果是true，任何时候只要语句被调用，都会导致本地缓存和二级缓存都会被清空，默认值：false。
        useCache:  如果是true，将会导致本条语句的结果被二级缓存，默认值：对 select 元素为 true。
        timeout: 驱动程序等待数据库返回请求结果的秒数，超过之后会抛出异常。默认值为 unset（依赖驱动）。
        fetchSize: 这是尝试影响驱动程序每次批量返回的结果行数和这个设置值相等。默认值为 unset（依赖驱动）
        statementType: STATEMENT，PREPARED 或 CALLABLE 的一个。这会让 MyBatis 分别使用 Statement，PreparedStatement 或 CallableStatement，默认值：PREPARED

     -->
    <select id="selectPersonById"
            parameterType="int"
            resultType="mybatis.dao.Person"
            flushCache="false"
            useCache="true"
            timeout="10000"
            fetchSize="256"
            statementType="PREPARED"
            resultSetType="FORWARD_ONLY"
    >
      SELECT * FROM Person WHERE id = #{id}
    </select>

    <!--
        useGeneratedKeys: (仅对 insert 和 update 有用）这会令 MyBatis 使用 JDBC 的 getGeneratedKeys 方法来取出由数据库内部生成的主键
        keyProperty: 	（仅对 insert 和 update 有用）唯一标记一个属性，MyBatis 会通过 getGeneratedKeys 的返回值或者通过 insert 语句的
            selectKey 子元素设置它的键值，默认：unset。如果希望得到多个生成的列，也可以是逗号分隔的属性名称列表.
        keyColumn:（仅对 insert 和 update 有用）通过生成的键值设置表中的列名，这个设置仅在某些数据库（像 PostgreSQL）是必须的，
            当主键列不是表中的第一列的时候需要设置。如果希望得到多个生成的列，也可以是逗号分隔的属性名称列表。
    -->
    <insert id="insertPerson"
            parameterType="mybatis.dao.Person"
            flushCache="true"
            statementType="PREPARED"
            keyProperty="id"
            keyColumn=""
            useGeneratedKeys="true"
            timeout="20">
        INSERT INTO Person (id, sex, name, age) VALUES (#{id}, #{sex}, #{name}, #{age})
    </insert>

    <insert id="batchInsertPerson"
            parameterType="mybatis.dao.Person"
            flushCache="true"
            statementType="PREPARED"
            keyProperty="id"
            keyColumn=""
            useGeneratedKeys="true"
            timeout="20">
        INSERT INTO Person (id, sex, name, age) VALUES
        <foreach item="item" collection="list" separator=",">
            (#{item.sex}, #{item.name}, #{item.age})
        </foreach>
    </insert>

    <update
            id="updatePerson"
            parameterType="mybatis.dao.Person"
            flushCache="true"
            statementType="PREPARED"
            timeout="20">
        UPDATE Person SET
        name = #{name},
        sex = #{sex},
        age = #{age},
        where id = #{id}
    </update>
    <delete
            id="deletePerson"
            parameterType="mybatis.dao.Person"
            flushCache="true"
            statementType="PREPARED"
            timeout="20">
        DELETE FROM Person WHERE id=#{id}
    </delete>

    <sql id="personColumns"> ${alias}.id,${alias}.username,${alias}.password </sql>

    <select id="selectUsers" resultType="map">
        select
        <include refid="personColumns"><property name="alias" value="t1"/></include>,
        <include refid="personColumns"><property name="alias" value="t2"/></include>
        from Person t1
        cross join Person t2
    </select>

</mapper>