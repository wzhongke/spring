<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:c="http://www.springframework.org/schema/c"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/aop
        http://www.springframework.org/schema/aop/spring-aop.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context.xsd
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd"

       default-init-method="init"
       default-destroy-method="destroy"
>

    <!-- 通常，每个XML配置文件都表示体系结构中的一个逻辑层或模块。 -->
    <!-- 使用 import 引入其他配置文件
        import 路径说明：resource属性中使用的是相对路径，相对于当前文件的路径，如果写成绝对路径格式（以 '\' 开头）也会被看做相对路径
        当然使用 file:E:/config/file.xml 或者 `classpath:/config/service` 也可以
    -->
    <import resource="services.xml" />

    <mvc:annotation-driven />
    <context:component-scan base-package="examples"/>


    <!-- 构造器实例化 bean - 参数类型方式匹配 -->
    <bean id="exampleBean" class="examples.bean.instantiating.ExampleBean">
        <constructor-arg type="int" value="75000"/>
        <constructor-arg type="java.lang.String" value="42" />
    </bean>
    <!-- 构造器实例化 bean - 参数位置方式匹配 -->
    <bean id="exampleBean2" class="examples.bean.instantiating.ExampleBean">
        <constructor-arg index="0" value="75000"/>
        <constructor-arg index="1" value="42" />
    </bean>

    <!-- 构造器实例化 bean - 参数名方式匹配 -->
    <bean id="exampleBean3" class="examples.bean.instantiating.ExampleBean">
        <constructor-arg name="years" value="7500"/>
        <constructor-arg name="ultimateAnswer" value="42"/>
    </bean>
    <!-- 构造器实例简写，对于引用同p类似，比如 `c:bean-ref="targetBean"` -->
    <bean id="exampleBean3c" class="examples.bean.instantiating.ExampleBean"
        c:years="7500" c:ultimateAnswer="42"
    />
    <!-- 对于少数情况（不包含调试信息的编译代码），不能够使用参数名 -->
    <bean id="exampleBean3cw" class="examples.bean.instantiating.ExampleBean"
          c:_0="7500" c:_1="42"
    />

    <!-- 静态工厂方法实例化 Bean -->
    <bean id="staticFactoryMethod" class="examples.bean.instantiating.StaticFactoryMethod" factory-method="createInstance" />

    <!-- 非静态工厂方法实例化 Bean -->
    <bean id="nonStaticFactoryMethod" class="examples.bean.instantiating.NonStaticFactoryMethod" />
    <bean id="service1" factory-bean="nonStaticFactoryMethod" factory-method="getInstance1" />
    <bean id="service2" factory-bean="nonStaticFactoryMethod" factory-method="getInstance2" />

    <!-- 基于 setter 方式的注入 -->
    <bean id="exampleBean4" class="examples.bean.instantiating.ExampleBean">
        <property name="years" value="750000"/>
        <property name="ultimateAnswer" value="44"/>
    </bean>

    <bean id="exampleBean5" class="examples.bean.instantiating.ExampleBean"
          p:years="7000"
          p:ultimateAnswer="45">
    </bean>

    <bean id="exampleBean6" class="examples.bean.instantiating.ExampleBean" autowire="byName" init-method="init">
        <property name="refBean">
            <idref bean="targetBean" />
        </property>
    </bean>
    <bean id="exampleBean6p" class="examples.bean.instantiating.ExampleBean"
          p:ref-ref="targetBean"/>

    <bean id="targetBean" class="examples.bean.instantiating.ExampleRef"/>

    <bean id="exampleBean7" class="examples.bean.instantiating.ExampleBean">
        <property name="ref">
            <ref bean="targetBean"/>
        </property>
    </bean>

    <!-- inner beans -->
    <bean id="outer" class="examples.bean.instantiating.ExampleBean">
        <property name="ref">
            <bean class="examples.bean.instantiating.ExampleRef" />
        </property>
    </bean>

    <!-- collections 集合类 -->
    <bean id="moreComplexObject" class="examples.bean.instantiating.ComplexObject">
        <!-- results in a setAdminEmails(java.util.Properties) call -->
        <property name="adminEmails">
            <props>
                <prop key="administrator">administrator@example.org</prop>
                <prop key="support">support@example.org</prop>
                <prop key="development">development@example.org</prop>
            </props>
        </property>
        <!-- results in a setSomeList(java.util.List) call -->
        <property name="someList">
            <list>
                <value>a list element followed by a reference</value>
                <ref bean="exampleBean7" />
            </list>
        </property>
        <!-- results in a setSomeMap(java.util.Map) call -->
        <property name="someMap">
            <map>
                <entry key="an entry" value="just some string"/>
                <entry key ="a ref" value-ref="exampleBean7"/>
            </map>
        </property>
        <!-- results in a setSomeSet(java.util.Set) call -->
        <property name="someSet">
            <set>
                <value>just some string</value>
                <ref bean="exampleBean7" />
            </set>
        </property>
        <property name="nullList">
            <null/>
        </property>
    </bean>

    <!-- 合并集合
    child 的 adminEmails 中的元素为：
        administrator=administrator@example.com
        sales=sales@example.com
        support=support@example.com
    -->
    <bean id="parent" abstract="true" class="examples.bean.instantiating.ComplexObject">
        <property name="adminEmails">
            <props>
                <prop key="administrator">adminstrator@example.com</prop>
                <prop key="support">support@example.com</prop>
            </props>
        </property>
    </bean>

    <bean id="child" parent="parent">
        <property name="adminEmails">
            <!-- the merge is specified on the child collection definition -->
            <props merge="true">
                <prop key="sales">sales@example.com</prop>
                <prop key="support">support@example.co.uk</prop>
            </props>
        </property>
    </bean>

    <!--如果一个bean对于其他bean是有依赖的，但是这个依赖不能通过 `<ref/>` 等方式在配置中体现出来，那么可以使用 `depends-on` 属性来明确指定依赖 -->
    <bean id="dependsObject" class="examples.bean.instantiating.ComplexObject" depends-on="exampleBean5">
        <property name="someSet">
            <set>
                <ref bean="exampleBean5" />
            </set>
        </property>
    </bean>

    <!-- look up method injection -->
    <!-- a stateful bean deployed as a prototype (non-singleton) -->
    <bean id="exampleBeanInject" class="examples.bean.instantiating.ExampleBean" scope="prototype">
        <property name="years" value="750000"/>
        <property name="ultimateAnswer" value="44"/>
    </bean>

    <bean id="methodInjection" class="examples.bean.instantiating.MethodInjectionWithLookup">
        <lookup-method name="createExampleBean" bean="exampleBeanInject" />
    </bean>

    <!-- 使用代理的方式 -->
    <!-- Scoped beans as dependencies -->
    <!-- an HTTP prototype-scoped bean exposed as a proxy -->
    <bean id="scopedBean" class="examples.bean.instantiating.ExampleBean" scope="prototype">
        <property name="years" value="750000"/>
        <property name="ultimateAnswer" value="44"/>
        <aop:scoped-proxy />
    </bean>

    <!-- a singleton-scoped bean injected with a proxy to the above bean -->
    <bean id="proxy" class="examples.bean.instantiating.ScopeProxy" scope="singleton">
        <property name="bean" ref="scopedBean" />
    </bean>

    <!-- 自定义生命周期 -->
    <bean class="org.springframework.beans.factory.config.CustomScopeConfigurer">
        <property name="scopes">
            <map>
                <entry key="custom">
                    <bean class="examples.scope.CustomScope"/>
                </entry>
            </map>
        </property>
    </bean>

    <bean id="customScopeBean" class="examples.bean.instantiating.ExampleBean" scope="custom" init-method="init"/>

    <bean id="initBean" class="examples.bean.instantiating.ExampleBean" init-method="init"/>
    <bean id="destroyBean" class="examples.bean.instantiating.ExampleBean" destroy-method="destroy"/>

    <bean name="beanAware1 beanAware2" class="examples.aware.BeanApplicationContextAware" />


    <bean id="mappingJacksonHttpMessageConverter"
          class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
        <property name="supportedMediaTypes">
            <list>
                <value>text/html;charset=UTF-8</value>
                <value>application/json;charset=utf-8</value>
            </list>
        </property>
    </bean>

     <!--多文件上传 MultipartResolver-->
    <!-- 使用 springboot 的 Application 启动时，不能包含下面的 bean，使用 tomcat 时，必须包含 -->
    <!-- 注意：CommonsMultipartResolver的id是固定不变的，一定是multipartResolver，不可修改 -->
    <bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
        <!-- 如果上传后出现文件名中文乱码可以使用该属性解决 -->
        <property name="defaultEncoding" value="utf-8"/>
        <!-- 单位是字节，不设置默认不限制总的上传文件大小，这里设置总的上传文件大小不超过1M（1*1024*1024） -->
        <property name="maxUploadSize" value="1048576"/>
        <!-- 跟maxUploadSize差不多，不过maxUploadSizePerFile是限制每个上传文件的大小，而maxUploadSize是限制总的上传文件大小 -->
        <property name="maxUploadSizePerFile" value="1048576"/>
    </bean>

    <!-- HTTP 缓存对于静态资源的支持 -->
    <mvc:resources mapping="/static/**" location="/static/">
        <mvc:cache-control max-age="3600" cache-public="true" />
    </mvc:resources>
    <mvc:default-servlet-handler />
</beans>
